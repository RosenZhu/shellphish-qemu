diff --git a/linux-user/elfload.c b/linux-user/elfload.c
index c77ed1b..e8b480e 100644
--- a/linux-user/elfload.c
+++ b/linux-user/elfload.c
@@ -1,6 +1,8 @@
 /* This is the Linux kernel elf-loading code, ported into user space */
 #include "qemu/osdep.h"
 #include <sys/param.h>
+#include <sys/types.h>
+#include <sys/stat.h>
 
 #include <sys/resource.h>
 
@@ -3090,6 +3092,20 @@ static void fill_auxv_note(struct memelfnote *note, const TaskState *ts)
     }
 }
 
+const char *coredump_prefix = ".";
+void qemu_set_core_dump_prefix(const char *prefix)
+{
+    struct stat path_stat;
+    char* path = NULL;
+
+    if (stat(prefix, &path_stat) != 0)return;
+    if (!S_ISDIR(path_stat.st_mode))return;
+
+    path = (char *)malloc(PATH_MAX+1);
+    coredump_prefix = realpath(prefix, path);
+}
+
+
 /*
  * Constructs name of coredump file.  We have following convention
  * for the name:
@@ -3116,7 +3132,7 @@ static int core_dump_filename(const TaskState *ts, char *buf,
     base_filename = g_path_get_basename(ts->bprm->filename);
     (void) strftime(timestamp, sizeof (timestamp), "%Y%m%d-%H%M%S",
                     localtime_r(&tv.tv_sec, &tm));
-    (void) snprintf(buf, bufsize, "qemu_%s_%s_%d.core",
+    (void) snprintf(buf, bufsize, "%s/qemu_%s_%s_%d.core", coredump_prefix,
                     base_filename, timestamp, (int)getpid());
     g_free(base_filename);
 
diff --git a/linux-user/main.c b/linux-user/main.c
index 8907a84..57200c6 100644
--- a/linux-user/main.c
+++ b/linux-user/main.c
@@ -4215,6 +4215,11 @@ static void handle_arg_stack_size(const char *arg)
     }
 }
 
+static void handle_arg_core(const char *arg)
+{
+    qemu_set_core_dump_prefix(arg);
+}
+
 static void handle_arg_ld_prefix(const char *arg)
 {
     interp_prefix = strdup(arg);
@@ -4342,6 +4347,8 @@ static const struct qemu_argument arg_table[] = {
      "",           ""},
     {"g",          "QEMU_GDB",         true,  handle_arg_gdb,
      "port",       "wait gdb connection to 'port'"},
+    {"C",          "QEMU_CORE_PREFIX", true,  handle_arg_core,
+     "path",       "set coredump path prefix to 'path' (default '.')"},
     {"L",          "QEMU_LD_PREFIX",   true,  handle_arg_ld_prefix,
      "path",       "set the elf interpreter prefix to 'path'"},
     {"s",          "QEMU_STACK_SIZE",  true,  handle_arg_stack_size,
diff --git a/linux-user/qemu.h b/linux-user/qemu.h
index 192a0d2..1662b53 100644
--- a/linux-user/qemu.h
+++ b/linux-user/qemu.h
@@ -186,6 +186,7 @@ int loader_exec(int fdexec, const char *filename, char **argv, char **envp,
 uint32_t get_elf_eflags(int fd);
 int load_elf_binary(struct linux_binprm *bprm, struct image_info *info);
 int load_flt_binary(struct linux_binprm *bprm, struct image_info *info);
+void qemu_set_core_dump_prefix(const char *prefix);
 
 abi_long memcpy_to_target(abi_ulong dest, const void *src,
                           unsigned long len);
diff --git a/linux-user/signal.c b/linux-user/signal.c
index b283270..e9f3e8c 100644
--- a/linux-user/signal.c
+++ b/linux-user/signal.c
@@ -555,6 +555,8 @@ static void QEMU_NORETURN dump_core_and_abort(int target_sig)
     TaskState *ts = (TaskState *)cpu->opaque;
     int host_sig, core_dumped = 0;
     struct sigaction act;
+    target_ulong cs_base, pc;
+    uint32_t flags;
 
     host_sig = target_to_host_signal(target_sig);
     trace_user_force_sig(env, target_sig, host_sig);
@@ -577,6 +579,16 @@ static void QEMU_NORETURN dump_core_and_abort(int target_sig)
             target_sig, strsignal(host_sig), "core dumped" );
     }
 
+    cpu_get_tb_cpu_state(env, &pc, &cs_base, &flags);
+    if(sizeof(target_ulong) == 4){
+        qemu_log("qemu: uncaught target signal %d (%s) - %s [%08x]\n",
+            target_sig, strsignal(host_sig), "core dumped", (unsigned int)pc);
+    }
+    else if(sizeof(target_ulong) == 8){
+        qemu_log("qemu: uncaught target signal %d (%s) - %s [%016llx]\n",
+            target_sig, strsignal(host_sig), "core dumped", (unsigned long long)pc);
+    }
+
     /* The proper exit code for dying from an uncaught signal is
      * -<signal>.  The kernel doesn't allow exit() or _exit() to pass
      * a negative value.  To get the proper exit code we need to
